
aa_set = ['A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V']


def generate_finally_result_file(head_list, predict_list):
    hANDn = {1:'anti-CRISPR', 0:'non anti-CRISPR'}
    resultDict = dict()

    for i in range(len(predict_list)):
        label = 0
        if(predict_list[i] >= 0.5):
            label = 1
        if resultDict.get(label) == None:
            resultDict[label] = ''
        resultDict[label] += (head_list[i] + "\tpredict score: " + str(round(predict_list[i],3)))
    #print(resultDict)
    # g = open(finallyresultfile, 'w')
    for i in [0,1]:
        if(i not in resultDict):
            continue
        line = "%s"%(hANDn[i])
        try:
            str1 = resultDict[i]
        except KeyError:
            str1 = ''
        finally:
            line2 = str1
    line3 = line2+'\tpredict as:'+line+'\n'
    return line3
    
def run_svm_predict(sequence_file, pssm_file, model_path, scale_path):
    sequence_list,head_list = read_file(sequence_file)
    feature_list = feature_extraction(sequence_list, pssm_file, scale_path)
    #clf = joblib.load(model_file)
    #clf = XGBClassifier()
    clf_list = get_all_clf(model_path)
    predict_list = perform_prediction(clf_list, feature_list)
    return head_list, predict_list

def perform_prediction(clf_list, feature_list):
    predict_list = [0] * len(feature_list[0])
    para = [[[15, 39, 43, 32, 21, 20, 26, 8, 2, 44, 27, 31, 1, 88, 113, 14, 9, 123, 30, 85, 16, 60, 152, 17, 57, 37, 153, 42, 13, 98, 68, 122, 58, 148, 140, 62, 4, 36, 102, 157, 124, 137, 87, 65, 49, 150, 119, 55, 77, 107, 80, 5, 120, 149, 114, 112, 72, 82, 41, 7, 81, 133, 167, 93, 78, 108, 160, 48, 95, 115, 53, 10, 19, 73, 86, 165, 33, 151, 89, 23, 61, 110, 28, 84, 45, 56, 54, 22, 103, 97],
             [15, 32, 88, 58, 26, 20, 8, 2, 39, 21, 152, 113, 57, 1, 68, 43, 44, 30, 4, 17, 87, 102, 153, 9, 73, 98, 27, 5, 123, 31, 48, 84, 72, 7, 137, 14, 33, 115, 36, 122, 10, 120, 103, 22, 37, 138, 127, 78, 108, 64, 54, 41, 42, 148, 76, 106, 112, 16, 158, 124, 85, 13, 160, 114, 23, 121, 40, 157, 25, 71, 154, 110, 74, 104, 11, 151, 149, 97, 93, 59, 67, 131, 77, 107, 19, 111, 164, 79, 118, 150, 128, 86, 53, 101, 3, 94, 134, 147, 56, 29, 55, 139, 119, 132, 140, 100, 161, 92, 141, 167, 62, 34, 70, 129, 6, 12, 46, 75, 105, 50],
             [15, 39, 20, 44, 21, 43, 2, 8, 26, 32, 27, 1, 113, 31, 102, 37, 16, 120, 84, 17, 72, 14, 9, 13, 123, 88, 57, 58, 30, 42, 152, 5, 4, 7, 167, 71, 87, 76, 106, 153, 67, 97, 64, 157, 54, 22, 48, 112, 111, 101, 77, 107, 151, 148, 36, 94, 62, 150, 73, 68, 114, 78, 108, 127, 138, 134, 115, 82, 19, 133, 119, 122, 110, 46, 154, 41, 10, 103, 144, 128, 23, 3, 129, 161, 24, 145, 75, 105, 11, 146, 121, 98, 91, 160, 53, 136, 86, 55, 85, 45, 63, 93, 137, 18, 156, 140, 51, 141, 131, 126],
             [15, 39, 43, 32, 26, 21, 20, 27, 8, 31, 2, 88, 58, 44, 113, 1, 102, 30, 14, 41, 123, 119, 160, 9, 37, 4, 157, 17, 68, 134, 167, 84, 13, 140, 42, 7, 98, 5, 60, 97, 153, 72, 152, 148, 36, 87, 137, 128, 80, 57, 77, 107, 112, 22, 16, 53, 110, 64, 165, 62, 93, 67, 124, 150, 154, 45, 34, 85, 54, 10, 114, 138, 161, 129, 95, 23, 28, 76, 106, 111, 19, 166, 48, 52, 82, 159, 6, 12, 118, 151, 78, 108, 133, 59, 127, 86, 33, 156, 81, 71, 3, 164, 79, 101, 96, 120, 144, 163, 90, 131, 126, 135, 92, 141, 130, 29, 91, 50, 65, 24, 100, 51, 158, 122, 115, 55, 75, 105, 83, 11, 168, 94, 38, 63, 74, 104, 40, 155, 125, 35, 25, 66, 121, 145, 69, 162, 89, 116, 46, 143, 18, 61, 136, 56, 117, 132, 103, 99, 146, 139],
             [15, 39, 16, 17, 113, 88, 42, 102, 20, 43, 37, 21, 58, 32, 110, 8, 13, 26, 72, 77, 107, 2, 27, 57, 123, 112, 68, 31, 140, 62]],
            [[206, 64, 33, 207, 350, 353, 126, 351, 35, 342, 215, 37, 325, 204, 335, 28, 31, 25, 24, 36, 34, 352, 205, 286, 288, 15, 40, 27, 61, 360, 305, 349, 284, 144, 203, 281, 307, 285, 212, 73, 78, 23, 202, 346, 340, 379, 330, 341, 71, 357, 62, 147, 292, 217, 347, 21, 216, 209, 287, 38, 356, 208, 331, 30, 320, 345, 343, 115, 374, 386, 145, 80, 39, 227, 70, 5, 127, 369, 22, 333, 324, 69, 279, 283, 334, 348, 323, 44, 299, 304, 246, 308, 300, 319, 294, 313, 74, 124, 235, 327, 289, 57, 306, 328, 339, 155, 253, 47, 167, 274, 293, 67, 79, 175, 136, 132, 315, 156, 56, 387, 355, 113, 116, 7, 392, 105, 383, 314, 329, 120, 211, 338, 271, 311, 219, 291, 157, 318, 185, 303, 201, 310, 197, 298, 135, 254, 143, 395, 153, 200, 295, 385, 4, 370, 384, 290, 123, 218, 344, 20, 396, 312, 8, 130, 165, 236, 146, 149, 119, 282, 111, 378, 160, 43, 102, 134, 65, 118, 273, 184, 326, 371, 179, 220, 362, 296, 158, 159, 309, 29],
             [350, 353, 23, 33, 284, 287, 349, 351, 126, 36, 147, 342, 360, 206, 374, 145, 345, 341, 132, 357],
             [33, 34, 31, 206, 37, 64, 287, 350, 36, 35, 28, 25, 351, 40, 144, 207, 353, 126, 30, 147, 360, 284, 342, 62, 78, 24, 292, 21, 175, 374, 308, 39, 379, 212, 319, 61, 23, 205, 349, 215, 27, 204, 80, 288, 325, 285, 286, 253, 22, 227, 73, 217, 216, 71, 67, 283, 324, 305, 56, 38, 123, 203, 168, 132, 145, 307, 15, 143, 70, 323, 335, 279, 352, 357, 299, 157, 341, 314, 155, 347, 345, 356, 281, 346, 43, 306, 161, 124, 386, 44, 294, 289, 113, 177, 69, 176, 5, 127, 343, 340, 369, 313, 208, 274, 165, 74, 300, 320, 330, 246, 57, 202, 153, 333, 327, 120, 304, 156, 251, 387, 293, 174, 334, 173, 96, 209, 115, 254, 383, 260, 180, 384, 331, 136, 79, 295, 146, 84, 164, 355, 311, 348, 178, 291, 392, 298, 167, 297, 339, 65, 200, 160, 296, 310, 303, 328, 290, 171, 201, 97, 395, 197, 226, 396, 135, 318, 8, 105, 93, 219, 309, 154, 117, 385, 99, 235, 20, 329, 83, 77, 158, 326, 170, 232, 58, 159, 152, 86, 87, 172],
             [350, 287, 33, 284, 353, 288, 342, 126, 351, 147, 206, 360, 281, 349, 144, 28, 357, 31, 352, 341, 207, 335, 331, 374, 347, 345, 286, 155, 285, 35, 356, 343, 34, 132, 325, 283, 36, 386, 379, 215, 24, 64, 346, 292, 333, 340, 330, 307, 157, 15, 348, 300, 205, 246, 145, 204, 40, 387, 37, 216, 355, 294, 27, 39, 21, 293, 212, 78, 153, 384, 324, 124, 208, 69, 120, 25, 327, 313, 334, 253, 38, 203, 30, 304, 289, 392, 160, 156, 115, 297, 62, 143, 127, 299, 146, 305, 217, 73, 175, 339, 61, 319, 23, 67, 320, 279, 123, 328, 295, 395, 383, 113, 22, 176, 306, 344, 296, 197, 291, 298, 80, 154, 167, 200, 71, 202, 201, 56, 136, 44, 159, 105, 274, 323, 70, 117, 227, 168, 290, 311, 151, 396, 393, 152, 161, 96, 308, 209, 57, 310, 164, 74, 314, 47, 81, 116, 282, 338, 5, 362, 7, 219, 8, 326, 149, 93, 388, 378, 399, 110, 79, 150, 29, 303, 174, 312, 260, 165, 332, 369, 135, 77, 52, 111, 119, 211, 177, 252, 125, 158, 84, 48, 235, 226, 385, 336, 377, 138, 381, 173],
             [350, 206, 353, 351, 62, 207, 349, 33, 215, 28, 35, 360, 281, 31, 374, 345, 342, 34, 64, 204, 15, 40, 379, 352, 308, 37, 24, 208, 287, 341, 347, 346, 357, 216, 203, 78, 126, 36, 71, 284, 73, 25, 212, 288, 30, 343, 205, 324, 144, 61, 305, 320, 69, 22, 356, 38, 209, 323, 327, 335, 217, 80, 147, 202, 74, 39, 292, 283, 8, 123, 253, 348, 132, 167, 79, 120, 70, 44, 21, 23, 307, 285, 286, 115, 27, 319, 175, 294, 219, 57, 300, 355, 362, 328, 218, 313, 246, 5, 176, 113, 369, 67, 235, 227, 314, 310, 211, 340, 124, 65, 299, 157, 20, 145, 386, 293, 56, 311, 201, 127]],
            [[75, 284, 87, 66, 65, 139, 133, 287, 67, 79, 80, 85, 84, 69, 73, 71, 74, 138, 295, 78, 125, 134, 77, 179, 119, 64, 106, 72, 144, 126, 344, 99, 86, 61, 59, 89, 135, 129, 307, 131, 169, 306, 94, 365, 304, 147, 379, 63, 244, 70, 113, 265, 347, 53, 286, 160, 140, 76, 385, 93, 155, 364, 118, 164, 132, 303, 245, 313, 319, 127, 83, 95, 98, 109, 122, 62, 123, 100, 247, 312],
             [66, 87, 67, 134, 133, 139, 119, 73, 74, 53, 79, 99, 65, 75, 76, 287, 72, 63, 125, 284, 131, 71, 138, 113, 106, 126, 365, 94, 86, 379, 64, 59, 114, 85, 364, 179, 51, 84, 77, 313, 307, 265, 80, 69, 359, 118, 319, 78, 264, 46, 344, 83, 306, 243, 244, 147, 303, 47, 54, 123, 279, 286, 58, 311, 111, 107, 378, 135, 245, 127, 314, 295, 45, 347, 44, 374, 93, 61, 343, 333, 43, 129, 144, 70, 304, 367, 312, 140, 239, 234, 274, 340, 167, 263, 143, 354, 238, 156, 247, 363, 293, 253, 259, 89, 320, 233, 385, 96, 104, 109, 160, 60, 278, 49, 130, 164, 258, 55, 68, 256, 103, 273, 301, 166, 132, 283, 203, 375, 62, 369, 345, 7, 50, 174, 146, 98, 157, 231, 159, 154, 169, 325, 153, 326, 205, 163, 173, 122, 248, 275, 267, 305, 327, 27, 204, 384, 331, 100, 52, 124, 315, 294, 105, 120, 14, 56, 358, 57, 317, 227, 95, 178, 396, 339, 185, 110, 255, 398, 296, 376],
             [66, 133, 75, 67, 134, 284, 139, 79, 87, 73, 74, 71, 65, 119, 287, 64, 131, 138, 80, 59, 72, 78, 69, 77, 125, 244, 63, 84, 53, 365, 344, 179, 113, 99, 70, 126, 114, 265, 76, 58, 295, 86, 51, 379, 384, 364, 61, 54, 247, 313, 144, 147, 264, 118, 106, 307, 333, 94, 140, 83, 85, 135, 245, 68, 304, 160, 286, 44, 243, 359, 312, 130, 46, 303, 347, 93, 306, 279, 319, 47, 154, 239, 320, 49, 7, 129, 340, 343, 45, 273, 363, 256, 293, 111, 159, 164, 274, 55, 374, 166, 378, 385, 314, 43, 127, 123, 104, 153, 204, 234, 311, 60, 107, 253, 283, 163, 169, 89, 301, 248, 167, 315, 263, 396, 317, 50, 238, 100, 184, 109, 354, 132, 174, 387, 143, 157, 96, 278, 155, 146, 124, 345, 294, 367, 173, 325, 52, 326, 156, 331, 203, 327, 233, 375, 57, 178, 103, 267, 310, 196, 259, 300, 150, 62, 296, 275, 369, 95, 14, 105, 1, 207, 255, 98, 187, 137, 288, 258, 368, 120, 373, 330, 321, 316, 216, 383, 324, 205, 358, 346, 388, 88, 4, 224, 19, 145, 309, 112, 110, 393],
             [66, 67, 133, 87, 126, 73, 134, 71, 139, 106, 284, 64, 69, 72, 75, 79, 74, 138, 61, 131, 80, 63, 65, 78, 287, 307, 119, 244, 86, 306, 76, 77, 312, 113, 313, 293, 344, 129, 379, 99, 84, 107, 364, 104, 144, 46, 127, 295, 53, 47, 304, 245, 365, 286, 125, 44, 7, 247, 179, 147, 279, 93, 333, 319, 359, 166, 265, 114, 303, 14, 123, 160, 94, 264, 301, 167, 347, 118, 70, 85, 68, 43, 59, 239, 311, 19, 109, 274, 135, 62, 374, 52, 164, 234, 256, 140, 132, 259, 378, 153, 255, 258, 384, 314, 340, 111, 327, 146, 367, 320, 233, 103, 248, 51, 326, 204, 122, 385, 173, 273, 130, 124, 156, 49, 89, 354, 300, 278, 238, 294],
             [74, 80, 66, 75, 134, 67, 284, 139, 79, 77, 71, 133, 73, 87, 65, 119, 160, 72, 179, 78, 344, 384, 379, 138, 287, 106, 244, 126, 70, 64, 131, 295, 53, 59, 264, 61, 69, 144, 364, 63, 76, 84, 365, 99, 154, 307, 313, 378, 113, 147, 239, 125, 140, 279, 319, 68, 359, 320, 54, 60, 114, 274, 7, 234, 300, 51, 312, 94, 314, 155, 374, 265, 303, 159, 327, 247, 127, 107, 306, 204, 317, 294, 304, 123, 153, 174, 129, 248, 301, 58, 340, 311, 293, 47, 275, 118, 243, 86, 278, 388, 148, 326, 57, 368, 375, 130, 156, 286, 354, 150, 46, 137, 347, 333, 288, 336, 85, 104, 88, 166, 343, 50, 43, 100, 268, 238, 385, 93, 167, 135, 256, 111, 316, 259, 83, 184, 132, 44, 387, 324, 363, 14, 173, 95, 157, 143, 398, 178, 169, 151, 283, 233, 164, 1, 369, 45, 396, 337, 62, 245, 89, 19, 367, 358, 298, 109, 124, 55, 323, 321]],
            [[34, 54, 103, 122, 104, 123, 93, 33, 173, 51, 124, 127, 153, 64, 24, 133, 67, 141, 193, 192, 42, 1, 81, 5, 134, 114, 194, 171, 125, 14, 37, 174, 45, 94, 58, 142, 2, 44, 172, 55, 100, 138, 15, 3, 181, 84, 60, 195, 13, 41, 61, 184, 46, 79, 38, 176, 107, 166, 47, 63, 163, 175, 43, 23, 82, 68, 154, 9, 159, 169, 131, 32, 31, 178, 180, 139, 74, 80, 129, 108, 92, 200, 11, 156, 65, 197, 49, 110, 118, 165, 111, 39, 161, 130, 121, 30, 115, 4, 186, 148, 12, 28, 188, 132, 158, 102, 137, 56, 144, 70, 199, 140, 177, 182, 101, 72, 105, 190, 57, 52, 25, 17, 91, 76, 155, 179, 10, 128, 160, 62, 89, 18, 157, 53, 191, 167, 183, 99, 21, 117, 97, 71, 77, 113, 151, 27, 120, 50, 78, 112],
             [54, 34, 122, 153, 103, 123, 173, 33, 5, 171, 127, 141, 133, 42, 124, 138, 51, 93, 64, 1, 81, 37, 172, 125, 67, 44, 24, 193, 46, 104, 142, 45, 134, 2, 192, 114, 175, 174, 14, 47, 9, 41, 176, 181, 60, 84, 49, 43, 180, 178, 55, 3, 61, 159, 179, 31, 186, 184, 15, 38, 58, 144, 194, 23, 121, 82, 4, 100, 63, 188, 39, 154, 13, 128, 50, 48, 163, 195, 177, 139, 131, 94, 92, 197, 77, 107, 155, 32, 143, 72, 120, 190, 118, 140, 68, 169, 52, 21, 156, 28, 70, 35, 129, 74, 71, 78, 137, 145, 56, 108, 87, 182, 151, 30, 132, 164, 102, 75, 40, 166, 106, 97, 20, 76, 17, 185, 8, 101, 62, 157, 158, 110, 183, 25, 115, 27, 161, 18, 165, 12, 146, 99, 86, 79, 88, 167, 11, 126, 136, 6, 200, 69, 111, 91, 113, 109, 53, 26, 198, 85, 148, 130, 57, 65, 199, 29, 149, 105, 189, 96],
             [34, 153, 54, 103, 33, 123, 122, 124, 104, 93, 64, 141, 173, 94, 127, 133, 5, 24, 51, 134, 194, 193, 1, 114, 14, 125, 42, 81, 67, 45, 142, 171, 2, 3, 37, 60, 138, 23, 174, 184, 192, 159, 58, 80, 9, 84, 195, 44, 172, 175, 47, 61, 55, 129, 31, 70, 154, 46, 144, 166, 186, 108, 100, 13, 32, 163, 4, 156, 41, 128, 63, 79, 43, 181, 118, 188, 199, 148, 107, 176, 121, 15, 99, 25, 92, 16, 180, 101, 106, 35, 147, 50, 17, 74, 111, 197, 39, 190, 169, 21, 49, 89, 191, 120, 91, 82, 139, 72, 52, 178, 30, 157, 158, 182, 77, 132, 177, 140, 56, 62, 150, 68, 102, 97, 11, 161, 165, 116, 38, 76, 36, 19, 143, 71, 155, 26, 145, 179, 183, 170, 200, 28, 137, 167, 59, 57, 198, 168, 110, 115, 96, 113, 65, 105, 185, 160, 189, 12, 131, 164, 75, 151, 69, 8, 22, 136, 149, 152, 40, 18, 27, 95, 130, 7, 112, 196, 10, 119, 48, 146, 90, 53, 88, 162, 187, 85, 66, 83, 73, 109, 126, 87, 86, 29, 98, 117, 6, 20, 135, 78],
             [34, 54, 122, 104, 124, 103, 153, 51, 123, 33, 93, 5, 173, 125, 193, 127, 141, 2, 64, 94, 171, 1, 24, 67, 195, 194, 42, 133, 45, 14, 134, 114, 192, 81, 100, 47, 142, 3, 46, 138, 172, 175, 156, 39, 37, 55, 30, 60, 61, 41, 166, 49, 44, 23, 84, 174, 13, 31, 79, 181, 154, 15, 159, 180, 129, 184, 163, 80, 150, 58, 72, 148, 91, 9, 200, 106, 101, 11, 144, 43, 179, 4, 35, 25, 82, 92, 32, 70, 186, 169, 176, 131, 191, 118, 128, 110, 140, 74, 116, 182, 21, 38, 188, 197, 196, 167, 178, 76, 63, 52, 96, 90, 107, 190, 149, 17, 108, 69, 71, 105, 102, 157, 68, 50, 77, 139, 155, 115, 147, 75, 111, 99, 120, 130, 12, 10, 95, 183, 132, 160, 16, 170, 185, 161, 48, 143, 62, 66, 56, 198, 29, 36, 121, 89, 189, 26, 78, 7, 151, 146, 87, 59, 164, 98, 28, 57, 158, 145, 137, 86, 168, 199, 19, 112, 177, 27, 22, 113, 165, 187, 97, 73, 53, 83, 109, 20, 119, 18, 85, 117, 65, 152, 126, 8, 40, 6, 162, 135, 136, 88],
             [34, 54, 123, 104, 103, 64, 133, 33, 153, 173, 122, 124, 93, 127, 51, 134, 24, 14, 114, 94, 2, 141, 174, 194, 193, 45, 3, 184, 67, 1, 42, 58, 125, 81, 46, 5, 80, 171, 100, 159, 37, 195, 172, 181, 47, 84, 41, 44, 60, 154, 142, 156, 175, 116, 192, 166, 61, 101, 79, 91, 150, 148, 186, 138, 13, 9, 35, 39, 23, 191, 55, 129, 118, 200, 49, 161, 4, 139, 180, 163, 43, 30, 63, 183, 75, 22, 76, 74, 169, 178, 15, 176, 144, 72, 10, 16, 182, 50, 140, 107, 131, 82, 99, 197, 151, 77, 11, 179, 149, 36, 31, 57, 177, 160, 126, 96, 32, 146, 71, 89, 68, 164, 190, 52, 38, 97, 66, 137, 199, 135, 132, 18, 128, 106, 147, 121, 19, 48, 110, 90, 120, 165, 152, 92, 119, 189, 28, 70, 7, 188, 167, 20, 53, 40, 157, 105, 21, 25, 155, 117, 102, 29, 62, 83, 111, 196, 185, 143, 73, 158, 88, 108, 198, 87, 78, 17, 95, 112, 65, 69]]]

    for i, feature in enumerate(feature_list): ##each feature
        for j in range(5): ##each sampling
            new_feature = []
            for single_feature in feature: ##each sample
                single_new_feature = []
                para[i][j].sort()
                for indexj in para[i][j]:
                    single_new_feature.append(single_feature[indexj-1])
                new_feature.append(single_new_feature)
            current_list = clf_list[i][j].predict_proba(np.array(new_feature))[:,1].tolist()
            for k in range(len(predict_list)):
                predict_list[k] += current_list[k]
    for k in range(len(predict_list)):
        predict_list[k] /= 20
    return predict_list
                
        

def get_all_clf(model_path):
    clf_list = []
    for i in [1, 3, 4, 6]:
        clf_set = []
        for j in range(1,6):
            clf_set.append(joblib.load(model_path+ 'svm_2022_4_21-' + str(i)+'-'+str(j)))
        clf_list.append(clf_set)
    return clf_list

def process_pssm(file_name):
    f = open(file_name,'r')
    all_lines = f.readlines()
    f.close()
    aa_line = all_lines[2]
    index_set = []
    try:
        for index,ch in enumerate(aa_line):
            if(ch!=' '):
                index_set.append(index)
    except ValueError:
        print('Wrong of ',file_name)
        print(aa_line)
    index_set = index_set[:20]
    lines = all_lines[3:]
    pssm = []
    #index_set = [i*4 for i in range(3,23)]
    for index,line in enumerate(lines):
        
        if(line=='\n'):
            break
        line_pssm = []
        for i in index_set:
            if(line[i]==' '):
                print(index,i,file_name)
            elif(line[i-1]=='-'):
                line_pssm.append(int(line[i-1]+line[i]))
            else:
                line_pssm.append(int(line[i]))
        
        pssm.append(line_pssm)
    
    return pssm

def pssm_composition(sequence,pssm_matrix):
    global aa_set
    aa_dict = {}
    l = len(sequence)
    #aa_dict = dict.zip(aa_set,np.zeros([0]*10))
    for index,aa in enumerate(sequence):
        if aa not in aa_dict.keys():
            aa_dict[aa] = np.zeros(20)
        aa_dict[aa] += np.array(pssm_matrix[index])/l
    pssm_composition = []
    for aa in aa_set:
        for i in range(20):
            if aa in aa_dict.keys():
                pssm_composition.append(aa_dict[aa][i].tolist())
            else:
                pssm_composition.append(0)
    return pssm_composition    

def dpc_pssm(pssm_matrix):
    dpc_pssm = []
    for i in range(20):
        for j in range(20):
            num = 0
            for k in range(len(pssm_matrix)-1):
                num += pssm_matrix[k][i]*pssm_matrix[k+1][j]    
            num /= (len(pssm_matrix)-1)
            dpc_pssm.append(num)
    return dpc_pssm

def pssm_ac(pssm_matrix,LG):
    pssm_ac = []
    np_pssm = np.array(pssm_matrix)
    p = np.mean(np_pssm,axis=0)
    for j in range(20):  ###column = j
        for lg in range(1,LG+1):  ####
            num = 0
            for i in range(len(pssm_matrix)-lg):   #####i = k
                num += ((pssm_matrix[i][j]-p[j])*(pssm_matrix[i+lg][j]-p[j]))
            num /= (len(pssm_matrix)-lg)
            pssm_ac.append(num)
    return pssm_ac

def feature_extraction(sequence_list, pssm_file, scale_path):
    all_scaler = []
    all_scaler.append(joblib.load(scale_path+'ctd_scaler-4-21'))
    all_scaler.append(joblib.load(scale_path+'pssm_co_scaler-4-21'))
    all_scaler.append(joblib.load(scale_path+'dpc_pssm_scaler-4-21'))
    all_scaler.append(joblib.load(scale_path+'pssm_ac_scaler-4-21'))
    pssm = []
    pssm.append(process_pssm(pssm_file))
    ctd_list = all_scaler[0].transform(feature188d(sequence_list)).tolist()
    pssm_co = []
    dpc_pss = []
    pssm_a = []
    for i,s in enumerate(sequence_list):
        pssm_co.append(pssm_composition(s,pssm[i]))
        dpc_pss.append(dpc_pssm(pssm[i]))
        pssm_a.append(pssm_ac(pssm[i],10))
    pssm_co = all_scaler[1].transform(pssm_co).tolist()
    dpc_pss = all_scaler[2].transform(dpc_pss).tolist()
    pssm_a = all_scaler[3].transform(pssm_a).tolist()
    all_feature = []
    all_feature.append(ctd_list)
    all_feature.append(pssm_co)
    all_feature.append(dpc_pss)
    all_feature.append(pssm_a)
    return all_feature

def read_file(file_path):
    f = open(file_path,'r')
    sequence = ''
    sequence_list = []
    head_list = []
    for line in f:
        if '>' in line:
            head_list.append(line.split('\n')[0])
            if sequence!='':
                sequence_list.append(sequence)
            sequence = ''
        else:
            sequence+=line.split('\n')[0]
    sequence_list.append(sequence)
    f.close()
    #for s in sequence_list:
    #    print(s)
    #for s in head_list:
    #    print(s)
    return sequence_list,head_list


import re
import sys, os
from feature188d import feature188d
import numpy as np
import joblib
import pickle

predict_program_path = os.path.dirname(sys.argv[0])
model_path = predict_program_path + '/model/'
scale_path = predict_program_path + '/scale/'
seqdir = predict_program_path + '/all_Testing_ProteinSeq/'
pssmdir = predict_program_path + '/all_Testing_PSSMs/'

finallyresultfile = "result.txt"

if __name__ == '__main__':

	seqfileList = os.listdir(seqdir)
	out = open(finallyresultfile,'w')

	for eachseq in seqfileList:
		sequence_file = seqdir+eachseq
		pssm_file = pssmdir+eachseq
		head_list, predict_list = run_svm_predict(sequence_file, pssm_file, model_path, scale_path)
		res = generate_finally_result_file(head_list, predict_list)
		out.write(res)
	out.close()

